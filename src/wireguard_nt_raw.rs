/* automatically generated by rust-bindgen 0.59.1 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type WCHAR = wchar_t;
pub type LPWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type GUID = _GUID;
pub type LPARAM = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIREGUARD_ADAPTER {
    _unused: [u8; 0],
}
#[doc = " A handle representing WireGuard adapter"]
pub type WIREGUARD_ADAPTER_HANDLE = *mut _WIREGUARD_ADAPTER;
#[doc = " Called by WireGuardEnumAdapters for each adapter in the pool."]
#[doc = ""]
#[doc = " @param Adapter       Adapter handle, which will be freed when this function returns."]
#[doc = ""]
#[doc = " @param Param         An application-defined value passed to the WireGuardEnumAdapters."]
#[doc = ""]
#[doc = " @return Non-zero to continue iterating adapters; zero to stop."]
pub type WIREGUARD_ENUM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(Adapter: WIREGUARD_ADAPTER_HANDLE, Param: LPARAM) -> BOOL,
>;
#[doc = "< Informational"]
pub const WIREGUARD_LOGGER_LEVEL_WIREGUARD_LOG_INFO: WIREGUARD_LOGGER_LEVEL = 0;
#[doc = "< Warning"]
pub const WIREGUARD_LOGGER_LEVEL_WIREGUARD_LOG_WARN: WIREGUARD_LOGGER_LEVEL = 1;
#[doc = "< Error"]
pub const WIREGUARD_LOGGER_LEVEL_WIREGUARD_LOG_ERR: WIREGUARD_LOGGER_LEVEL = 2;
#[doc = " Determines the level of logging, passed to WIREGUARD_LOGGER_CALLBACK."]
pub type WIREGUARD_LOGGER_LEVEL = ::std::os::raw::c_int;
#[doc = " Called by internal logger to report diagnostic messages"]
#[doc = ""]
#[doc = " @param Level         Message level."]
#[doc = ""]
#[doc = " @param Timestamp     Message timestamp in in 100ns intervals since 1601-01-01 UTC."]
#[doc = ""]
#[doc = " @param Message       Message text."]
pub type WIREGUARD_LOGGER_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(Level: WIREGUARD_LOGGER_LEVEL, Timestamp: DWORD64, Message: LPCWSTR),
>;
#[doc = "< No logs are generated from the driver."]
pub const WIREGUARD_ADAPTER_LOG_STATE_WIREGUARD_ADAPTER_LOG_OFF: WIREGUARD_ADAPTER_LOG_STATE = 0;
#[doc = "< Logs are generated from the driver."]
pub const WIREGUARD_ADAPTER_LOG_STATE_WIREGUARD_ADAPTER_LOG_ON: WIREGUARD_ADAPTER_LOG_STATE = 1;
#[doc = "< Logs are generated from the driver, index-prefixed."]
pub const WIREGUARD_ADAPTER_LOG_STATE_WIREGUARD_ADAPTER_LOG_ON_WITH_PREFIX:
    WIREGUARD_ADAPTER_LOG_STATE = 2;
#[doc = " Whether and how logs from the driver are collected for the callback function."]
pub type WIREGUARD_ADAPTER_LOG_STATE = ::std::os::raw::c_int;
#[doc = "< Down"]
pub const WIREGUARD_ADAPTER_STATE_WIREGUARD_ADAPTER_STATE_DOWN: WIREGUARD_ADAPTER_STATE = 0;
#[doc = "< Up"]
pub const WIREGUARD_ADAPTER_STATE_WIREGUARD_ADAPTER_STATE_UP: WIREGUARD_ADAPTER_STATE = 1;
#[doc = " Determines the state of the adapter."]
pub type WIREGUARD_ADAPTER_STATE = ::std::os::raw::c_int;
#[doc = "< The PublicKey field is set"]
pub const WIREGUARD_INTERFACE_FLAG_WIREGUARD_INTERFACE_HAS_PUBLIC_KEY: WIREGUARD_INTERFACE_FLAG = 1;
#[doc = "< The PrivateKey field is set"]
pub const WIREGUARD_INTERFACE_FLAG_WIREGUARD_INTERFACE_HAS_PRIVATE_KEY: WIREGUARD_INTERFACE_FLAG =
    2;
#[doc = "< The ListenPort field is set"]
pub const WIREGUARD_INTERFACE_FLAG_WIREGUARD_INTERFACE_HAS_LISTEN_PORT: WIREGUARD_INTERFACE_FLAG =
    4;
#[doc = "< Remove all peers before adding new ones"]
pub const WIREGUARD_INTERFACE_FLAG_WIREGUARD_INTERFACE_REPLACE_PEERS: WIREGUARD_INTERFACE_FLAG = 8;
pub type WIREGUARD_INTERFACE_FLAG = ::std::os::raw::c_int;
pub type WIREGUARD_INTERFACE = _WIREGUARD_INTERFACE;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _WIREGUARD_INTERFACE {
    #[doc = "< Bitwise combination of flags"]
    pub Flags: WIREGUARD_INTERFACE_FLAG,
    #[doc = "< Port for UDP listen socket, or 0 to choose randomly"]
    pub ListenPort: WORD,
    #[doc = "< Private key of interface"]
    pub PrivateKey: [BYTE; 32usize],
    #[doc = "< Corresponding public key of private key"]
    pub PublicKey: [BYTE; 32usize],
    #[doc = "< Number of peer structs following this struct"]
    pub PeersCount: DWORD,
}
#[test]
fn bindgen_test_layout__WIREGUARD_INTERFACE() {
    assert_eq!(
        ::std::mem::size_of::<_WIREGUARD_INTERFACE>(),
        80usize,
        concat!("Size of: ", stringify!(_WIREGUARD_INTERFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_WIREGUARD_INTERFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_WIREGUARD_INTERFACE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WIREGUARD_INTERFACE>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WIREGUARD_INTERFACE),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WIREGUARD_INTERFACE>())).ListenPort as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WIREGUARD_INTERFACE),
            "::",
            stringify!(ListenPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WIREGUARD_INTERFACE>())).PrivateKey as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_WIREGUARD_INTERFACE),
            "::",
            stringify!(PrivateKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WIREGUARD_INTERFACE>())).PublicKey as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_WIREGUARD_INTERFACE),
            "::",
            stringify!(PublicKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WIREGUARD_INTERFACE>())).PeersCount as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_WIREGUARD_INTERFACE),
            "::",
            stringify!(PeersCount)
        )
    );
}
extern crate libloading;
pub struct wireguard {
    __library: ::libloading::Library,
    pub WireGuardCreateAdapter: Result<
        unsafe extern "C" fn(
            Pool: LPCWSTR,
            Name: LPCWSTR,
            RequestedGUID: *const GUID,
            RebootRequired: *mut BOOL,
        ) -> WIREGUARD_ADAPTER_HANDLE,
        ::libloading::Error,
    >,
    pub WireGuardOpenAdapter: Result<
        unsafe extern "C" fn(Pool: LPCWSTR, Name: LPCWSTR) -> WIREGUARD_ADAPTER_HANDLE,
        ::libloading::Error,
    >,
    pub WireGuardDeleteAdapter: Result<
        unsafe extern "C" fn(Adapter: WIREGUARD_ADAPTER_HANDLE, RebootRequired: *mut BOOL) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardEnumAdapters: Result<
        unsafe extern "C" fn(
            Pool: LPCWSTR,
            Callback: WIREGUARD_ENUM_CALLBACK,
            Param: LPARAM,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardFreeAdapter:
        Result<unsafe extern "C" fn(Adapter: WIREGUARD_ADAPTER_HANDLE), ::libloading::Error>,
    pub WireGuardDeletePoolDriver: Result<
        unsafe extern "C" fn(Pool: LPCWSTR, RebootRequired: *mut BOOL) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardGetAdapterName: Result<
        unsafe extern "C" fn(Adapter: WIREGUARD_ADAPTER_HANDLE, Name: LPWSTR) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardSetAdapterName: Result<
        unsafe extern "C" fn(Adapter: WIREGUARD_ADAPTER_HANDLE, Name: LPCWSTR) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardGetRunningDriverVersion:
        Result<unsafe extern "C" fn() -> DWORD, ::libloading::Error>,
    pub WireGuardSetLogger:
        Result<unsafe extern "C" fn(NewLogger: WIREGUARD_LOGGER_CALLBACK), ::libloading::Error>,
    pub WireGuardSetAdapterLogging: Result<
        unsafe extern "C" fn(
            Adapter: WIREGUARD_ADAPTER_HANDLE,
            LogState: WIREGUARD_ADAPTER_LOG_STATE,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardSetAdapterState: Result<
        unsafe extern "C" fn(
            Adapter: WIREGUARD_ADAPTER_HANDLE,
            State: WIREGUARD_ADAPTER_STATE,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardGetAdapterState: Result<
        unsafe extern "C" fn(
            Adapter: WIREGUARD_ADAPTER_HANDLE,
            State: *mut WIREGUARD_ADAPTER_STATE,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardSetConfiguration: Result<
        unsafe extern "C" fn(
            Adapter: WIREGUARD_ADAPTER_HANDLE,
            Config: *const WIREGUARD_INTERFACE,
            Bytes: DWORD,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub WireGuardGetConfiguration: Result<
        unsafe extern "C" fn(
            adapter: WIREGUARD_ADAPTER_HANDLE,
            config: *mut WIREGUARD_INTERFACE,
            bytes: *mut DWORD,
        ) -> BOOL,
        ::libloading::Error,
    >,
}
impl wireguard {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let WireGuardCreateAdapter = __library.get(b"WireGuardCreateAdapter\0").map(|sym| *sym);
        let WireGuardOpenAdapter = __library.get(b"WireGuardOpenAdapter\0").map(|sym| *sym);
        let WireGuardDeleteAdapter = __library.get(b"WireGuardDeleteAdapter\0").map(|sym| *sym);
        let WireGuardEnumAdapters = __library.get(b"WireGuardEnumAdapters\0").map(|sym| *sym);
        let WireGuardFreeAdapter = __library.get(b"WireGuardFreeAdapter\0").map(|sym| *sym);
        let WireGuardDeletePoolDriver = __library
            .get(b"WireGuardDeletePoolDriver\0")
            .map(|sym| *sym);
        let WireGuardGetAdapterName = __library.get(b"WireGuardGetAdapterName\0").map(|sym| *sym);
        let WireGuardSetAdapterName = __library.get(b"WireGuardSetAdapterName\0").map(|sym| *sym);
        let WireGuardGetRunningDriverVersion = __library
            .get(b"WireGuardGetRunningDriverVersion\0")
            .map(|sym| *sym);
        let WireGuardSetLogger = __library.get(b"WireGuardSetLogger\0").map(|sym| *sym);
        let WireGuardSetAdapterLogging = __library
            .get(b"WireGuardSetAdapterLogging\0")
            .map(|sym| *sym);
        let WireGuardSetAdapterState = __library.get(b"WireGuardSetAdapterState\0").map(|sym| *sym);
        let WireGuardGetAdapterState = __library.get(b"WireGuardGetAdapterState\0").map(|sym| *sym);
        let WireGuardSetConfiguration = __library
            .get(b"WireGuardSetConfiguration\0")
            .map(|sym| *sym);
        let WireGuardGetConfiguration = __library
            .get(b"WireGuardGetConfiguration\0")
            .map(|sym| *sym);
        Ok(wireguard {
            __library,
            WireGuardCreateAdapter,
            WireGuardOpenAdapter,
            WireGuardDeleteAdapter,
            WireGuardEnumAdapters,
            WireGuardFreeAdapter,
            WireGuardDeletePoolDriver,
            WireGuardGetAdapterName,
            WireGuardSetAdapterName,
            WireGuardGetRunningDriverVersion,
            WireGuardSetLogger,
            WireGuardSetAdapterLogging,
            WireGuardSetAdapterState,
            WireGuardGetAdapterState,
            WireGuardSetConfiguration,
            WireGuardGetConfiguration,
        })
    }
    pub unsafe fn WireGuardCreateAdapter(
        &self,
        Pool: LPCWSTR,
        Name: LPCWSTR,
        RequestedGUID: *const GUID,
        RebootRequired: *mut BOOL,
    ) -> WIREGUARD_ADAPTER_HANDLE {
        (self
            .WireGuardCreateAdapter
            .as_ref()
            .expect("Expected function, got error."))(
            Pool, Name, RequestedGUID, RebootRequired
        )
    }
    pub unsafe fn WireGuardOpenAdapter(
        &self,
        Pool: LPCWSTR,
        Name: LPCWSTR,
    ) -> WIREGUARD_ADAPTER_HANDLE {
        (self
            .WireGuardOpenAdapter
            .as_ref()
            .expect("Expected function, got error."))(Pool, Name)
    }
    pub unsafe fn WireGuardDeleteAdapter(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        RebootRequired: *mut BOOL,
    ) -> BOOL {
        (self
            .WireGuardDeleteAdapter
            .as_ref()
            .expect("Expected function, got error."))(Adapter, RebootRequired)
    }
    pub unsafe fn WireGuardEnumAdapters(
        &self,
        Pool: LPCWSTR,
        Callback: WIREGUARD_ENUM_CALLBACK,
        Param: LPARAM,
    ) -> BOOL {
        (self
            .WireGuardEnumAdapters
            .as_ref()
            .expect("Expected function, got error."))(Pool, Callback, Param)
    }
    pub unsafe fn WireGuardFreeAdapter(&self, Adapter: WIREGUARD_ADAPTER_HANDLE) -> () {
        (self
            .WireGuardFreeAdapter
            .as_ref()
            .expect("Expected function, got error."))(Adapter)
    }
    pub unsafe fn WireGuardDeletePoolDriver(
        &self,
        Pool: LPCWSTR,
        RebootRequired: *mut BOOL,
    ) -> BOOL {
        (self
            .WireGuardDeletePoolDriver
            .as_ref()
            .expect("Expected function, got error."))(Pool, RebootRequired)
    }
    pub unsafe fn WireGuardGetAdapterName(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        Name: LPWSTR,
    ) -> BOOL {
        (self
            .WireGuardGetAdapterName
            .as_ref()
            .expect("Expected function, got error."))(Adapter, Name)
    }
    pub unsafe fn WireGuardSetAdapterName(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        Name: LPCWSTR,
    ) -> BOOL {
        (self
            .WireGuardSetAdapterName
            .as_ref()
            .expect("Expected function, got error."))(Adapter, Name)
    }
    pub unsafe fn WireGuardGetRunningDriverVersion(&self) -> DWORD {
        (self
            .WireGuardGetRunningDriverVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn WireGuardSetLogger(&self, NewLogger: WIREGUARD_LOGGER_CALLBACK) -> () {
        (self
            .WireGuardSetLogger
            .as_ref()
            .expect("Expected function, got error."))(NewLogger)
    }
    pub unsafe fn WireGuardSetAdapterLogging(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        LogState: WIREGUARD_ADAPTER_LOG_STATE,
    ) -> BOOL {
        (self
            .WireGuardSetAdapterLogging
            .as_ref()
            .expect("Expected function, got error."))(Adapter, LogState)
    }
    pub unsafe fn WireGuardSetAdapterState(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        State: WIREGUARD_ADAPTER_STATE,
    ) -> BOOL {
        (self
            .WireGuardSetAdapterState
            .as_ref()
            .expect("Expected function, got error."))(Adapter, State)
    }
    pub unsafe fn WireGuardGetAdapterState(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        State: *mut WIREGUARD_ADAPTER_STATE,
    ) -> BOOL {
        (self
            .WireGuardGetAdapterState
            .as_ref()
            .expect("Expected function, got error."))(Adapter, State)
    }
    pub unsafe fn WireGuardSetConfiguration(
        &self,
        Adapter: WIREGUARD_ADAPTER_HANDLE,
        Config: *const WIREGUARD_INTERFACE,
        Bytes: DWORD,
    ) -> BOOL {
        (self
            .WireGuardSetConfiguration
            .as_ref()
            .expect("Expected function, got error."))(Adapter, Config, Bytes)
    }
    pub unsafe fn WireGuardGetConfiguration(
        &self,
        adapter: WIREGUARD_ADAPTER_HANDLE,
        config: *mut WIREGUARD_INTERFACE,
        bytes: *mut DWORD,
    ) -> BOOL {
        (self
            .WireGuardGetConfiguration
            .as_ref()
            .expect("Expected function, got error."))(adapter, config, bytes)
    }
}
